package com.lognsys.dao.jdbc.users;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Properties;
import javax.annotation.Resource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.stereotype.Repository;

import com.lognsys.model.Users;

@Repository("userRepository")
public class JdbcUserRepository implements UserRespository {

	@Autowired
	private NamedParameterJdbcTemplate namedParamJdbcTemplate;

	/**
	 * Injecting resource sql.properties.
	 */
	@Resource(name = "sqlProperties")
	private Properties sqlProperties;



	/**
	 * Add users object into database
	 * 
	 * @param users
	 */
	@Override
	public void addUser(Users users) {
		BeanPropertySqlParameterSource params = new BeanPropertySqlParameterSource(users);
		namedParamJdbcTemplate.update(sqlProperties.getProperty(USER_QUERIES.insert_users.name()), params);
	}

	/**
	 * Returns boolean true if user exists
	 * 
	 * @param username
	 *            - String
	 * 
	 */
	@Override
	public boolean isExists(String username) {

		SqlParameterSource param = new MapSqlParameterSource("username", username);
		return namedParamJdbcTemplate.queryForObject(sqlProperties.getProperty(USER_QUERIES.select_users_exists.name()),
				param, Integer.class) > 0;
	}

	/**
	 * 
	 */
	@Override
	public void updateUser(Users users) {

	}

	/**
	 * Returns Users object by id
	 * 
	 * @param id
	 *            - Integer
	 */
	@Override
	public Users findUserById(Integer id) {

		SqlParameterSource parameter = new MapSqlParameterSource("id", Integer.valueOf(id));

		Users useritem = new Users();
		namedParamJdbcTemplate.queryForObject(sqlProperties.getProperty(USER_QUERIES.select_users_id.name()), parameter,
				new RowMapper<Users>() {

					@Override
					public Users mapRow(ResultSet rs, int arg1) throws SQLException {

						useritem.setId(rs.getInt("id"));
						useritem.setUsername(rs.getString("username"));
						useritem.setRealname(rs.getString("realname"));
						useritem.setPhone(rs.getString("birthdate"));
						useritem.setEnabled(rs.getBoolean("enabled"));
						useritem.setAddress(rs.getString("address"));
						useritem.setPhone(rs.getString("phone"));
						useritem.setCity(rs.getString("city"));
						useritem.setState(rs.getString("state"));
						useritem.setZipcode(rs.getString("zipcode"));
						useritem.setAuth_id(rs.getString("auth_id"));
						return useritem;
					}
				});

		return useritem;
	}

	/**
	 * Returns List<Users> from database
	 */
	@Override
	public List<Users> getAllUsers() {
		List<Users> listUsers = namedParamJdbcTemplate.query(
				sqlProperties.getProperty(USER_QUERIES.select_users.name()),
				new BeanPropertyRowMapper<Users>(Users.class));

		return listUsers;
	}

	/**
	 * delete user by surrogate-id.. autogenerated Id
	 * 
	 * @param id
	 *            - Integer
	 */
	@Override
	public boolean deleteUserBy(Integer id) {
		SqlParameterSource parameter = new MapSqlParameterSource("id", Integer.valueOf(id));
		return namedParamJdbcTemplate.update(sqlProperties.getProperty(USER_QUERIES.delete_users.name()),
				parameter) == 1;
	}

	/**
	 * enum contains keys of queries defined in sql.properties.
	 * 
	 * Note: All queries should be added in sql.properties and all keys should
	 * be added to USER_QUERIES enum
	 */
	private enum USER_QUERIES {
		insert_users, select_users, delete_users, select_users_exists, select_users_id
	}

}
